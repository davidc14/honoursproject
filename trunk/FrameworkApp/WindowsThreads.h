#ifndef _WINDOWSTHREADS_H
#define _WINDOWSTHREADS_H

#include <winsock2.h>
#include <windows.h>
#include <queue>
#include "NetworkDefines.h"

#pragma comment(lib, "ws2_32.lib")

using namespace std;

class WindowsThreads 
{
protected:
	// This flag will signal our threadProc to stop executing
	bool terminateThreadFlag;

	// The handle to our thread
	HANDLE threadHandle;

public:
	// A constructor to setup our class correctly
	WindowsThreads();

	~WindowsThreads();

	// Begin the thread and execute the threadProc
	void begin();

	// Signal to stop our thread
	void end();

	// We will make this function virtual so that we can derive a new thread with a new procedure.
	// This will give us the ability to only have to define this one function for any new thread we
	// want to create, and we can use the convenience of our thread functions over and over again.
	virtual void threadProc() = 0;

	bool GetThreadFlag() { return terminateThreadFlag; }
	void SetThreadFlag(bool flag) { terminateThreadFlag = flag; }
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////

//class CUDPSocketRW 
//{
//public:
//	CUDPSocketRW(){}
//	~CUDPSocketRW(){}
//
//	void LoadSocket(SOCKET _s, int _ThreadNo) 
//	{
//		m_s = _s;
//		ThreadNumber = _ThreadNo;
//	}
//
//	//Load the thread, use this when the constructor is not available
//	void LoadThread(SOCKET _s, int _ThreadNo, HANDLE mutex, 
//		queue<ModelPacket>* send, queue<ModelPacket>* receive, sockaddr_in AddressMe, sockaddr_in AddressYou);
//
//	void ReloadRemoteAddress(sockaddr_in RemoteAddress);
//	
//	virtual void threadProc(void);
//
//	void begin();
//	void end();
//
//
//protected:
//
//	bool terminateThreadFlag;
//
//	int ThreadNumber;
//	SOCKET m_s;
//	ModelPacket m_MyPacketOut, m_MyPacketIn;
//
//	HANDLE mutexHandle;
//	queue<ModelPacket>* SendQ,* ReceiveQ;
//	sockaddr_in UDPSocketAddressMe;
//	sockaddr_in UDPSocketAddressYou;
//	sockaddr UDPRemoteAddress;
//
//	//Time code to time send calls
//	float deltaTime;
//	float m_Ticker;
//	DWORD startTime, endTime;
//};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////



#endif