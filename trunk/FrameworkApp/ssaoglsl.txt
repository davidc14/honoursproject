#version 150

/*========
-- In
========*/

uniform sampler2D Buffer0;
uniform sampler2D Buffer1;
uniform sampler2D Buffer2;
uniform sampler2D Buffer3;
uniform sampler2D Random;

uniform float in_NearPlane;
uniform float in_FarPlane;
uniform int in_ScreenWidth;
uniform int in_ScreenHeight;
uniform float in_FarPlaneWidth;
uniform float in_FarPlaneHeight;

uniform float in_SampleRadius;
uniform float in_Intensity;
uniform float in_Scale;
uniform float in_Bias;

in vec2 TexCoord;

/*========
-- Out
========*/

out vec4 gl_FragColor;

/*========
-- Code
========*/

const float RandomSize = 64;
float HalfWidth = in_FarPlaneWidth / 2;
float HalfHeight = in_FarPlaneHeight / 2;

vec3 getPosition(in vec2 uv)
{
	vec3 point = vec3(uv.x * in_FarPlaneWidth - HalfWidth, uv.y * in_FarPlaneHeight - HalfHeight, -in_FarPlane) * texture(Buffer0, uv).w;
	/* vec3 point = texture(Buffer2, uv).xyz; */
	
	return point;
}

vec3 getNormal(in vec2 uv)
{
        return normalize(texture(Buffer3, uv).xyz * 2.0 - 1.0);
}

vec2 getRandom(in vec2 uv)
{
	return normalize(texture(Random, vec2(in_ScreenWidth, in_ScreenHeight) * uv / RandomSize).xy * 2.0 - 1.0);
}

float doAmbientOcclusion(in vec2 tc, in vec2 uv, in vec3 pos, in vec3 norm)
{
	vec3 diff = getPosition(tc + uv) - pos;
	vec3 v = normalize(diff);
	float d = length(diff) * in_Scale;
	return max(0.0, dot(norm, v) - in_Bias) * ( 1.0/(1.0 + d) ) * in_Intensity;
}

void main()
{
	const vec2 vec[4] = vec2[4](vec2(1,0), vec2(-1,0), vec2(0,1), vec2(0,-1));
	
	vec3 position = getPosition(TexCoord);
	vec3 normal = getNormal(TexCoord);
	vec2 rand = getRandom(TexCoord);

	float ao = 0.0;
	float rad = in_SampleRadius / -position.z;

	const int iterations = 4;		
	for (int j = 0; j < iterations; ++j)
	{
		vec2 coord1 = reflect(vec[j], rand) * rad;
		vec2 coord2 = vec2(coord1.x - coord1.y, coord1.x + coord1.y) * 0.707;

		ao += doAmbientOcclusion(TexCoord, coord1*0.25, position, normal);
		ao += doAmbientOcclusion(TexCoord, coord2*0.5,  position, normal);
		ao += doAmbientOcclusion(TexCoord, coord1*0.75, position, normal);
		ao += doAmbientOcclusion(TexCoord, coord2,      position, normal);		
	} 
	
	ao /= iterations * 4.0;
	 
	float result = 1-ao;
	gl_FragColor = vec4(result, result, result, 1);
}
